/*
 * ENGINEDECODER_type.cpp
 *
 *  Created on: 01.05.2016
 *      Author: Autogenerated
 */



#include "ENGINEDECODER_type.h"
#include "math.h"
#include "det.h"


#define ENGINEDECODER_COUNTSPERREVOLUTION 	48							//factor to convert position actual value into wheel revolutions
#define ENGINEDECODER_WHEELDIAMETER 		10							//wheel diameter in centimeter

extern "C"
{

extern CODD_ENGINEDECODER_t CODD_ENGINEDECODER_previousPosition_data;

/*
#pragma section ".data.deadrek"
static ENGINEDECODER_data_t temObs;
#pragma section
*/

RC_t ENGINEDECODER_scaleR2D( const ENGINEDECODER_raw_t * const praw, ENGINEDECODER_data_t * const pvalue)
{

	if (praw == 0 || (*praw) == 0)
	{
		DET_stop(AUTOCORE, POINTER_ERROR, 0);
	}

	pvalue->delta_displacementFL = ((*praw)->engineFL_Pos - CODD_ENGINEDECODER_previousPosition_data.engineFL_Pos) * ENGINEDECODER_WHEELDIAMETER * M_PI / ENGINEDECODER_COUNTSPERREVOLUTION;
	pvalue->delta_displacementFR = ((*praw)->engineFR_Pos - CODD_ENGINEDECODER_previousPosition_data.engineFR_Pos) * ENGINEDECODER_WHEELDIAMETER * M_PI / ENGINEDECODER_COUNTSPERREVOLUTION;
	pvalue->delta_displacementRL = ((*praw)->engineRL_Pos - CODD_ENGINEDECODER_previousPosition_data.engineRL_Pos) * ENGINEDECODER_WHEELDIAMETER * M_PI / ENGINEDECODER_COUNTSPERREVOLUTION;
	pvalue->delta_displacementRR = ((*praw)->engineRR_Pos - CODD_ENGINEDECODER_previousPosition_data.engineRR_Pos) * ENGINEDECODER_WHEELDIAMETER * M_PI / ENGINEDECODER_COUNTSPERREVOLUTION;

	CODD_ENGINEDECODER_previousPosition_data.engineFL_Pos = (*praw)->engineFL_Pos;//updating previous position of FL with current position
	CODD_ENGINEDECODER_previousPosition_data.engineFR_Pos = (*praw)->engineFR_Pos;//updating previous position of FR with current position
	CODD_ENGINEDECODER_previousPosition_data.engineRL_Pos = (*praw)->engineRL_Pos;//updating previous position of RL with current position
	CODD_ENGINEDECODER_previousPosition_data.engineRR_Pos = (*praw)->engineRR_Pos;//updating previous position of RR with current position

	//temporary later to clean up
	/*temObs.delta_displacementFL = pvalue->delta_displacementFL;
	temObs.delta_displacementFR = pvalue->delta_displacementFR;
	temObs.delta_displacementRL = pvalue->delta_displacementRL;
	temObs.delta_displacementRR = pvalue->delta_displacementRR;*/

	return RC_SUCCESS;
}

RC_t ENGINEDECODER_scaleD2R( const ENGINEDECODER_data_t * const pvalue, ENGINEDECODER_raw_t * const praw)
{

	return RC_ERROR;
}

} //extern  "C"
